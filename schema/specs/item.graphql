type Query {
  directus_sync_id_map(filter: directus_sync_id_map_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_sync_id_map!]!
  directus_sync_id_map_by_id(id: ID!, version: String): directus_sync_id_map
  directus_sync_id_map_aggregated(groupBy: [String], filter: directus_sync_id_map_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [directus_sync_id_map_aggregated!]!
  directus_sync_id_map_by_version(version: String!, id: ID!): version_directus_sync_id_map
  RaceCategory(filter: RaceCategory_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [RaceCategory!]!
  RaceCategory_by_id(id: ID!, version: String): RaceCategory
  RaceCategory_aggregated(groupBy: [String], filter: RaceCategory_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [RaceCategory_aggregated!]!
  RaceCategory_by_version(version: String!, id: ID!): version_RaceCategory
  UserDeparture(filter: UserDeparture_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [UserDeparture!]!
  UserDeparture_by_id(id: ID!, version: String): UserDeparture
  UserDeparture_aggregated(groupBy: [String], filter: UserDeparture_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [UserDeparture_aggregated!]!
  UserDeparture_by_version(version: String!, id: ID!): version_UserDeparture
  RaceInstruction(filter: RaceInstruction_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [RaceInstruction!]!
  RaceInstruction_by_id(id: ID!, version: String): RaceInstruction
  RaceInstruction_aggregated(groupBy: [String], filter: RaceInstruction_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [RaceInstruction_aggregated!]!
  RaceInstruction_by_version(version: String!, id: ID!): version_RaceInstruction
  Race(filter: Race_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [Race!]!
  Race_by_id(id: ID!, version: String): Race
  Race_aggregated(groupBy: [String], filter: Race_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Race_aggregated!]!
  Race_by_version(version: String!, id: ID!): version_Race
  GameAuthor(filter: GameAuthor_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [GameAuthor!]!
  GameAuthor_by_id(id: ID!, version: String): GameAuthor
  GameAuthor_aggregated(groupBy: [String], filter: GameAuthor_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [GameAuthor_aggregated!]!
  GameAuthor_by_version(version: String!, id: ID!): version_GameAuthor
  Game(filter: Game_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [Game!]!
  Game_by_id(id: ID!, version: String): Game
  Game_aggregated(groupBy: [String], filter: Game_filter, limit: Int, offset: Int, page: Int, search: String, sort: [String]): [Game_aggregated!]!
  Game_by_version(version: String!, id: ID!): version_Game
}

type Mutation {
  create_directus_sync_id_map_items(filter: directus_sync_id_map_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_directus_sync_id_map_input!]): [directus_sync_id_map!]!
  create_directus_sync_id_map_item(data: create_directus_sync_id_map_input!): directus_sync_id_map
  create_RaceCategory_items(filter: RaceCategory_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_RaceCategory_input!]): [RaceCategory!]!
  create_RaceCategory_item(data: create_RaceCategory_input!): RaceCategory
  create_UserDeparture_items(filter: UserDeparture_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_UserDeparture_input!]): [UserDeparture!]!
  create_UserDeparture_item(data: create_UserDeparture_input!): UserDeparture
  create_RaceInstruction_items(filter: RaceInstruction_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_RaceInstruction_input!]): [RaceInstruction!]!
  create_RaceInstruction_item(data: create_RaceInstruction_input!): RaceInstruction
  create_Race_items(filter: Race_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_Race_input!]): [Race!]!
  create_Race_item(data: create_Race_input!): Race
  create_GameAuthor_items(filter: GameAuthor_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_GameAuthor_input!]): [GameAuthor!]!
  create_GameAuthor_item(data: create_GameAuthor_input!): GameAuthor
  create_Game_items(filter: Game_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [create_Game_input!]): [Game!]!
  create_Game_item(data: create_Game_input!): Game
  update_directus_sync_id_map_items(filter: directus_sync_id_map_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_directus_sync_id_map_input!): [directus_sync_id_map!]!
  update_directus_sync_id_map_batch(filter: directus_sync_id_map_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_directus_sync_id_map_input!]): [directus_sync_id_map!]!
  update_directus_sync_id_map_item(id: ID!, data: update_directus_sync_id_map_input!): directus_sync_id_map
  update_RaceCategory_items(filter: RaceCategory_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_RaceCategory_input!): [RaceCategory!]!
  update_RaceCategory_batch(filter: RaceCategory_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_RaceCategory_input!]): [RaceCategory!]!
  update_RaceCategory_item(id: ID!, data: update_RaceCategory_input!): RaceCategory
  update_UserDeparture_items(filter: UserDeparture_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_UserDeparture_input!): [UserDeparture!]!
  update_UserDeparture_batch(filter: UserDeparture_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_UserDeparture_input!]): [UserDeparture!]!
  update_UserDeparture_item(id: ID!, data: update_UserDeparture_input!): UserDeparture
  update_RaceInstruction_items(filter: RaceInstruction_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_RaceInstruction_input!): [RaceInstruction!]!
  update_RaceInstruction_batch(filter: RaceInstruction_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_RaceInstruction_input!]): [RaceInstruction!]!
  update_RaceInstruction_item(id: ID!, data: update_RaceInstruction_input!): RaceInstruction
  update_Race_items(filter: Race_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_Race_input!): [Race!]!
  update_Race_batch(filter: Race_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_Race_input!]): [Race!]!
  update_Race_item(id: ID!, data: update_Race_input!): Race
  update_GameAuthor_items(filter: GameAuthor_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_GameAuthor_input!): [GameAuthor!]!
  update_GameAuthor_batch(filter: GameAuthor_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_GameAuthor_input!]): [GameAuthor!]!
  update_GameAuthor_item(id: ID!, data: update_GameAuthor_input!): GameAuthor
  update_Game_items(filter: Game_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, ids: [ID]!, data: update_Game_input!): [Game!]!
  update_Game_batch(filter: Game_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String, data: [update_Game_input!]): [Game!]!
  update_Game_item(id: ID!, data: update_Game_input!): Game
  delete_directus_sync_id_map_items(ids: [ID]!): delete_many
  delete_directus_sync_id_map_item(id: ID!): delete_one
  delete_RaceCategory_items(ids: [ID]!): delete_many
  delete_RaceCategory_item(id: ID!): delete_one
  delete_UserDeparture_items(ids: [ID]!): delete_many
  delete_UserDeparture_item(id: ID!): delete_one
  delete_RaceInstruction_items(ids: [ID]!): delete_many
  delete_RaceInstruction_item(id: ID!): delete_one
  delete_Race_items(ids: [ID]!): delete_many
  delete_Race_item(id: ID!): delete_one
  delete_GameAuthor_items(ids: [ID]!): delete_many
  delete_GameAuthor_item(id: ID!): delete_one
  delete_Game_items(ids: [ID]!): delete_many
  delete_Game_item(id: ID!): delete_one
}

type Subscription {
  directus_folders_mutated(event: EventEnum): directus_folders_mutated
  directus_activity_mutated(event: EventEnum): directus_activity_mutated
  directus_presets_mutated(event: EventEnum): directus_presets_mutated
  directus_users_mutated(event: EventEnum): directus_users_mutated
  directus_files_mutated(event: EventEnum): directus_files_mutated
  directus_roles_mutated(event: EventEnum): directus_roles_mutated
  directus_permissions_mutated(event: EventEnum): directus_permissions_mutated
  directus_dashboards_mutated(event: EventEnum): directus_dashboards_mutated
  directus_webhooks_mutated(event: EventEnum): directus_webhooks_mutated
  directus_panels_mutated(event: EventEnum): directus_panels_mutated
  directus_revisions_mutated(event: EventEnum): directus_revisions_mutated
  directus_notifications_mutated(event: EventEnum): directus_notifications_mutated
  directus_shares_mutated(event: EventEnum): directus_shares_mutated
  directus_flows_mutated(event: EventEnum): directus_flows_mutated
  directus_operations_mutated(event: EventEnum): directus_operations_mutated
  directus_translations_mutated(event: EventEnum): directus_translations_mutated
  directus_settings_mutated(event: EventEnum): directus_settings_mutated
  directus_policies_mutated(event: EventEnum): directus_policies_mutated
  directus_access_mutated(event: EventEnum): directus_access_mutated
  directus_versions_mutated(event: EventEnum): directus_versions_mutated
  directus_comments_mutated(event: EventEnum): directus_comments_mutated
  directus_sync_id_map_mutated(event: EventEnum): directus_sync_id_map_mutated
  RaceCategory_mutated(event: EventEnum): RaceCategory_mutated
  UserDeparture_mutated(event: EventEnum): UserDeparture_mutated
  RaceInstruction_mutated(event: EventEnum): RaceInstruction_mutated
  Race_mutated(event: EventEnum): Race_mutated
  GameAuthor_mutated(event: EventEnum): GameAuthor_mutated
  Game_mutated(event: EventEnum): Game_mutated
}

"""The `Boolean` scalar type represents `true` or `false`."""
scalar Boolean

"""ISO8601 Date values"""
scalar Date

"""
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
"""
scalar Float

"""BigInt value"""
scalar GraphQLBigInt

"""A Float or a String"""
scalar GraphQLStringOrFloat

"""Hashed string values"""
scalar Hash

"""
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
"""
scalar ID

"""
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
"""
scalar Int

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
"""
scalar String

enum EventEnum {
  create
  update
  delete
}

type count_functions {
  count: Int
}

type date_functions {
  year: Int
  month: Int
  week: Int
  day: Int
  weekday: Int
}

type datetime_functions {
  year: Int
  month: Int
  week: Int
  day: Int
  weekday: Int
  hour: Int
  minute: Int
  second: Int
}

type delete_many {
  ids: [ID]!
}

type delete_one {
  id: ID!
}

type directus_access {
  id: ID!
  role(filter: directus_roles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_roles
  user(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  policy(filter: directus_policies_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_policies
  sort: Int
}

type directus_access_mutated {
  key: ID!
  event: EventEnum
  data: directus_access
}

type directus_activity {
  id: ID!
  action: String!
  user(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  timestamp: Date
  timestamp_func: datetime_functions
  ip: String
  user_agent: String
  collection: String!
  item: String!
  origin: String
  revisions(filter: directus_revisions_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_revisions]
  revisions_func: count_functions
}

type directus_activity_mutated {
  key: ID!
  event: EventEnum
  data: directus_activity
}

type directus_comments {
  id: ID!
  collection: String!
  item: String!
  comment: String!
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
}

type directus_comments_mutated {
  key: ID!
  event: EventEnum
  data: directus_comments
}

type directus_dashboards {
  id: ID!
  name: String!
  icon: String
  note: String
  date_created: Date
  date_created_func: datetime_functions
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  color: String
  panels(filter: directus_panels_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_panels]
  panels_func: count_functions
}

type directus_dashboards_mutated {
  key: ID!
  event: EventEnum
  data: directus_dashboards
}

type directus_files {
  id: ID!
  storage: String!
  filename_disk: String
  filename_download: String!
  title: String
  type: String
  folder(filter: directus_folders_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_folders
  uploaded_by(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  created_on: Date
  created_on_func: datetime_functions
  modified_by(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  modified_on: Date
  modified_on_func: datetime_functions
  charset: String
  filesize: GraphQLBigInt
  width: Int
  height: Int
  duration: Int
  embed: String
  description: String
  location: String
  tags: JSON
  tags_func: count_functions
  metadata: JSON
  metadata_func: count_functions
  focal_point_x: Int
  focal_point_y: Int
  tus_id: String
  tus_data: JSON
  tus_data_func: count_functions
  uploaded_on: Date
  uploaded_on_func: datetime_functions
}

type directus_files_mutated {
  key: ID!
  event: EventEnum
  data: directus_files
}

type directus_flows {
  id: ID!
  name: String!
  icon: String
  color: String
  description: String
  status: String
  trigger: String
  accountability: String
  options: JSON
  options_func: count_functions
  operation(filter: directus_operations_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_operations
  date_created: Date
  date_created_func: datetime_functions
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  operations(filter: directus_operations_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_operations]
  operations_func: count_functions
}

type directus_flows_mutated {
  key: ID!
  event: EventEnum
  data: directus_flows
}

type directus_folders {
  id: ID!
  name: String!
  parent(filter: directus_folders_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_folders
}

type directus_folders_mutated {
  key: ID!
  event: EventEnum
  data: directus_folders
}

type directus_notifications {
  id: ID!
  timestamp: Date
  timestamp_func: datetime_functions
  status: String
  recipient(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  sender(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  subject: String!
  message: String
  collection: String
  item: String
}

type directus_notifications_mutated {
  key: ID!
  event: EventEnum
  data: directus_notifications
}

type directus_operations {
  id: ID!
  name: String
  key: String!
  type: String!
  position_x: Int!
  position_y: Int!
  options: JSON
  options_func: count_functions
  resolve(filter: directus_operations_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_operations
  reject(filter: directus_operations_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_operations
  flow(filter: directus_flows_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_flows
  date_created: Date
  date_created_func: datetime_functions
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
}

type directus_operations_mutated {
  key: ID!
  event: EventEnum
  data: directus_operations
}

type directus_panels {
  id: ID!
  dashboard(filter: directus_dashboards_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_dashboards
  name: String
  icon: String
  color: String
  show_header: Boolean!
  note: String
  type: String!
  position_x: Int!
  position_y: Int!
  width: Int!
  height: Int!
  options: JSON
  options_func: count_functions
  date_created: Date
  date_created_func: datetime_functions
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
}

type directus_panels_mutated {
  key: ID!
  event: EventEnum
  data: directus_panels
}

type directus_permissions {
  id: ID
  collection: String!
  action: String!
  permissions: JSON
  permissions_func: count_functions
  validation: JSON
  validation_func: count_functions
  presets: JSON
  presets_func: count_functions
  fields: [String]
  policy(filter: directus_policies_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_policies
}

type directus_permissions_mutated {
  key: ID!
  event: EventEnum
  data: directus_permissions
}

type directus_policies {
  id: ID!
  name: String!
  icon: String
  description: String
  ip_access: [String]

  """$t:field_options.directus_policies.enforce_tfa"""
  enforce_tfa: Boolean!
  admin_access: Boolean!
  app_access: Boolean!
  permissions(filter: directus_permissions_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_permissions]
  permissions_func: count_functions
  users(filter: directus_access_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_access]
  users_func: count_functions
  roles(filter: directus_access_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_access]
  roles_func: count_functions
}

type directus_policies_mutated {
  key: ID!
  event: EventEnum
  data: directus_policies
}

type directus_presets {
  id: ID!
  bookmark: String
  user(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  role(filter: directus_roles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_roles
  collection: String
  search: String
  layout: String
  layout_query: JSON
  layout_query_func: count_functions
  layout_options: JSON
  layout_options_func: count_functions
  refresh_interval: Int
  filter: JSON
  filter_func: count_functions
  icon: String
  color: String
}

type directus_presets_mutated {
  key: ID!
  event: EventEnum
  data: directus_presets
}

type directus_revisions {
  id: ID!
  activity(filter: directus_activity_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_activity
  collection: String!
  item: String!
  data: JSON
  data_func: count_functions
  delta: JSON
  delta_func: count_functions
  parent(filter: directus_revisions_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_revisions
  version(filter: directus_versions_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_versions
}

type directus_revisions_mutated {
  key: ID!
  event: EventEnum
  data: directus_revisions
}

type directus_roles {
  id: ID!
  name: String!
  icon: String
  description: String
  parent(filter: directus_roles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_roles
  children(filter: directus_roles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_roles]
  children_func: count_functions
  policies(filter: directus_access_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_access]
  policies_func: count_functions
  users(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_users]
  users_func: count_functions
}

type directus_roles_mutated {
  key: ID!
  event: EventEnum
  data: directus_roles
}

type directus_settings {
  id: ID!
  project_name: String
  project_url: String

  """$t:field_options.directus_settings.project_color_note"""
  project_color: String
  project_logo(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  public_foreground(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  public_background(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  public_note: String
  auth_login_attempts: Int
  auth_password_policy: String
  storage_asset_transform: String
  storage_asset_presets: JSON
  storage_asset_presets_func: count_functions
  custom_css: String
  storage_default_folder(filter: directus_folders_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_folders
  basemaps: JSON
  basemaps_func: count_functions
  mapbox_key: String
  module_bar: JSON
  module_bar_func: count_functions
  project_descriptor: String
  default_language: String
  custom_aspect_ratios: JSON
  custom_aspect_ratios_func: count_functions
  public_favicon(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  default_appearance: String
  default_theme_light: String
  theme_light_overrides: JSON
  theme_light_overrides_func: count_functions
  default_theme_dark: String
  theme_dark_overrides: JSON
  theme_dark_overrides_func: count_functions
  report_error_url: String
  report_bug_url: String
  report_feature_url: String

  """$t:fields.directus_settings.public_registration_note"""
  public_registration: Boolean!

  """$t:fields.directus_settings.public_registration_verify_email_note"""
  public_registration_verify_email: Boolean
  public_registration_role(filter: directus_roles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_roles

  """$t:fields.directus_settings.public_registration_email_filter_note"""
  public_registration_email_filter: JSON
  public_registration_email_filter_func: count_functions
}

type directus_settings_mutated {
  key: ID!
  event: EventEnum
  data: directus_settings
}

type directus_shares {
  id: ID!
  name: String
  collection: String!
  item: String!
  role(filter: directus_roles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_roles

  """$t:shared_leave_blank_for_passwordless_access"""
  password: Hash
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions

  """$t:shared_leave_blank_for_unlimited"""
  date_start: Date
  date_start_func: datetime_functions

  """$t:shared_leave_blank_for_unlimited"""
  date_end: Date
  date_end_func: datetime_functions
  times_used: Int

  """$t:shared_leave_blank_for_unlimited"""
  max_uses: Int
}

type directus_shares_mutated {
  key: ID!
  event: EventEnum
  data: directus_shares
}

type directus_sync_id_map {
  id: ID!
  table: String!
  sync_id: String!
  local_id: String!
  created_at: Date
  created_at_func: datetime_functions
}

type directus_sync_id_map_aggregated {
  group: JSON
  countAll: Int
  count: directus_sync_id_map_aggregated_count
  countDistinct: directus_sync_id_map_aggregated_count
  avg: directus_sync_id_map_aggregated_fields
  sum: directus_sync_id_map_aggregated_fields
  avgDistinct: directus_sync_id_map_aggregated_fields
  sumDistinct: directus_sync_id_map_aggregated_fields
  min: directus_sync_id_map_aggregated_fields
  max: directus_sync_id_map_aggregated_fields
}

type directus_sync_id_map_aggregated_count {
  id: Int
  table: Int
  sync_id: Int
  local_id: Int
  created_at: Int
}

type directus_sync_id_map_aggregated_fields {
  id: Float
}

type directus_sync_id_map_mutated {
  key: ID!
  event: EventEnum
  data: directus_sync_id_map
}

type directus_translations {
  id: ID!
  language: String!
  key: String!
  value: String!
}

type directus_translations_mutated {
  key: ID!
  event: EventEnum
  data: directus_translations
}

type directus_users {
  id: ID!
  first_name: String
  last_name: String
  email: String
  password: Hash
  location: String
  title: String
  description: String
  tags: JSON
  tags_func: count_functions
  avatar(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  language: String
  tfa_secret: Hash
  status: String
  role(filter: directus_roles_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_roles
  token: Hash
  last_access: Date
  last_access_func: datetime_functions
  last_page: String
  provider: String
  external_identifier: String
  auth_data: JSON
  auth_data_func: count_functions
  email_notifications: Boolean
  appearance: String
  theme_dark: String
  theme_light: String
  theme_light_overrides: JSON
  theme_light_overrides_func: count_functions
  theme_dark_overrides: JSON
  theme_dark_overrides_func: count_functions
  birthYear: Int
  composedIdentifierSolv: String
  races(filter: UserDeparture_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [UserDeparture]
  races_func: count_functions
  policies(filter: directus_access_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [directus_access]
  policies_func: count_functions
}

type directus_users_mutated {
  key: ID!
  event: EventEnum
  data: directus_users
}

type directus_versions {
  id: ID!
  key: String!
  name: String
  collection: String!
  item: String!
  hash: String
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  delta: JSON
  delta_func: count_functions
}

type directus_versions_mutated {
  key: ID!
  event: EventEnum
  data: directus_versions
}

type directus_webhooks {
  id: ID!
  name: String!
  method: String
  url: String!
  status: String
  data: Boolean
  actions: [String]!
  collections: [String]!
  headers: JSON
  headers_func: count_functions
  was_active_before_deprecation: Boolean!
  migrated_flow(filter: directus_flows_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_flows
}

type directus_webhooks_mutated {
  key: ID!
  event: EventEnum
  data: directus_webhooks
}

type Game {
  id: ID!
  status: String
  sort: Int
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  subtitle: String
  title: String
  description: String
  image(filter: directus_files_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_files
  externalUrl: String
  openOutsideApp: Boolean
  author(filter: GameAuthor_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): GameAuthor
}

type Game_aggregated {
  group: JSON
  countAll: Int
  count: Game_aggregated_count
  countDistinct: Game_aggregated_count
  avg: Game_aggregated_fields
  sum: Game_aggregated_fields
  avgDistinct: Game_aggregated_fields
  sumDistinct: Game_aggregated_fields
  min: Game_aggregated_fields
  max: Game_aggregated_fields
}

type Game_aggregated_count {
  id: Int
  status: Int
  sort: Int
  user_created: Int
  date_created: Int
  user_updated: Int
  date_updated: Int
  subtitle: Int
  title: Int
  description: Int
  image: Int
  externalUrl: Int
  openOutsideApp: Int
  author: Int
}

type Game_aggregated_fields {
  sort: Float
}

type Game_mutated {
  key: ID!
  event: EventEnum
  data: Game
}

type GameAuthor {
  id: ID!
  sort: Int
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_created: Date
  date_created_func: datetime_functions
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  date_updated: Date
  date_updated_func: datetime_functions
  name: String!
  url: String!
}

type GameAuthor_aggregated {
  group: JSON
  countAll: Int
  count: GameAuthor_aggregated_count
  countDistinct: GameAuthor_aggregated_count
  avg: GameAuthor_aggregated_fields
  sum: GameAuthor_aggregated_fields
  avgDistinct: GameAuthor_aggregated_fields
  sumDistinct: GameAuthor_aggregated_fields
  min: GameAuthor_aggregated_fields
  max: GameAuthor_aggregated_fields
}

type GameAuthor_aggregated_count {
  id: Int
  sort: Int
  user_created: Int
  date_created: Int
  user_updated: Int
  date_updated: Int
  name: Int
  url: Int
}

type GameAuthor_aggregated_fields {
  sort: Float
}

type GameAuthor_mutated {
  key: ID!
  event: EventEnum
  data: GameAuthor
}

type Race {
  city: String
  country: String
  date: Date
  date_func: date_functions
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  deadline: Date
  deadline_func: datetime_functions
  departureLink: String
  eventLink: String
  geographicalScale: String
  id: ID!
  inscriptionLink: String
  instructionLink: String
  liveResultLink: String
  mapName: String
  name: String
  originalDataFull: JSON
  originalDataFull_func: count_functions
  originalDataId: String
  originalDataSource: String
  publicationLink: String
  rankingLink: String
  region: String
  sort: Int
  status: String
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  terrain: String
  distance: String
  categories(filter: RaceCategory_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [RaceCategory]
  categories_func: count_functions
  instruction(filter: RaceInstruction_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): [RaceInstruction]
  instruction_func: count_functions
}

type Race_aggregated {
  group: JSON
  countAll: Int
  count: Race_aggregated_count
  countDistinct: Race_aggregated_count
  avg: Race_aggregated_fields
  sum: Race_aggregated_fields
  avgDistinct: Race_aggregated_fields
  sumDistinct: Race_aggregated_fields
  min: Race_aggregated_fields
  max: Race_aggregated_fields
}

type Race_aggregated_count {
  city: Int
  country: Int
  date: Int
  date_created: Int
  date_updated: Int
  deadline: Int
  departureLink: Int
  eventLink: Int
  geographicalScale: Int
  id: Int
  inscriptionLink: Int
  instructionLink: Int
  liveResultLink: Int
  mapName: Int
  name: Int
  originalDataFull: Int
  originalDataId: Int
  originalDataSource: Int
  publicationLink: Int
  rankingLink: Int
  region: Int
  sort: Int
  status: Int
  user_created: Int
  user_updated: Int
  terrain: Int
  distance: Int
  categories: Int
  instruction: Int
}

type Race_aggregated_fields {
  sort: Float
}

type Race_mutated {
  key: ID!
  event: EventEnum
  data: Race
}

type RaceCategory {
  amountOfControls: Int
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  distanceInMeter: Int
  equidistanceInMeter: Int
  id: ID!
  name: String
  race(filter: Race_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): Race
  sort: Int
  status: String
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
}

type RaceCategory_aggregated {
  group: JSON
  countAll: Int
  count: RaceCategory_aggregated_count
  countDistinct: RaceCategory_aggregated_count
  avg: RaceCategory_aggregated_fields
  sum: RaceCategory_aggregated_fields
  avgDistinct: RaceCategory_aggregated_fields
  sumDistinct: RaceCategory_aggregated_fields
  min: RaceCategory_aggregated_fields
  max: RaceCategory_aggregated_fields
}

type RaceCategory_aggregated_count {
  amountOfControls: Int
  date_created: Int
  date_updated: Int
  distanceInMeter: Int
  equidistanceInMeter: Int
  id: Int
  name: Int
  race: Int
  sort: Int
  status: Int
  user_created: Int
  user_updated: Int
}

type RaceCategory_aggregated_fields {
  amountOfControls: Float
  distanceInMeter: Float
  equidistanceInMeter: Float
  sort: Float
}

type RaceCategory_mutated {
  key: ID!
  event: EventEnum
  data: RaceCategory
}

type RaceInstruction {
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  id: ID!
  linkCrawled: String
  linkOverwritten: String
  publicTransportAI: String
  race(filter: Race_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): Race
  sort: Int
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  fileIdAI: String

  """A hash file of the file from the crawled or overwritten link."""
  fileHash: String
  summaryAI: String
}

type RaceInstruction_aggregated {
  group: JSON
  countAll: Int
  count: RaceInstruction_aggregated_count
  countDistinct: RaceInstruction_aggregated_count
  avg: RaceInstruction_aggregated_fields
  sum: RaceInstruction_aggregated_fields
  avgDistinct: RaceInstruction_aggregated_fields
  sumDistinct: RaceInstruction_aggregated_fields
  min: RaceInstruction_aggregated_fields
  max: RaceInstruction_aggregated_fields
}

type RaceInstruction_aggregated_count {
  date_created: Int
  date_updated: Int
  id: Int
  linkCrawled: Int
  linkOverwritten: Int
  publicTransportAI: Int
  race: Int
  sort: Int
  user_created: Int
  user_updated: Int
  fileIdAI: Int

  """A hash file of the file from the crawled or overwritten link."""
  fileHash: Int
  summaryAI: Int
}

type RaceInstruction_aggregated_fields {
  sort: Float
}

type RaceInstruction_mutated {
  key: ID!
  event: EventEnum
  data: RaceInstruction
}

type UserDeparture {
  date_created: Date
  date_created_func: datetime_functions
  date_updated: Date
  date_updated_func: datetime_functions
  id: ID!
  race(filter: Race_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): Race
  raceCategory(filter: RaceCategory_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): RaceCategory
  sort: Int
  startTimeInMinutes: Int
  status: String
  user(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  user_created(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
  user_updated(filter: directus_users_filter, sort: [String], limit: Int, offset: Int, page: Int, search: String): directus_users
}

type UserDeparture_aggregated {
  group: JSON
  countAll: Int
  count: UserDeparture_aggregated_count
  countDistinct: UserDeparture_aggregated_count
  avg: UserDeparture_aggregated_fields
  sum: UserDeparture_aggregated_fields
  avgDistinct: UserDeparture_aggregated_fields
  sumDistinct: UserDeparture_aggregated_fields
  min: UserDeparture_aggregated_fields
  max: UserDeparture_aggregated_fields
}

type UserDeparture_aggregated_count {
  date_created: Int
  date_updated: Int
  id: Int
  race: Int
  raceCategory: Int
  sort: Int
  startTimeInMinutes: Int
  status: Int
  user: Int
  user_created: Int
  user_updated: Int
}

type UserDeparture_aggregated_fields {
  sort: Float
  startTimeInMinutes: Float
}

type UserDeparture_mutated {
  key: ID!
  event: EventEnum
  data: UserDeparture
}

""""""
type version_directus_sync_id_map {
  id: ID
  table: String
  sync_id: String
  local_id: String
  created_at: Date
}

""""""
type version_Game {
  id: ID
  status: String
  sort: Int
  user_created: JSON
  date_created: Date
  user_updated: JSON
  date_updated: Date
  subtitle: String
  title: String
  description: String
  image: JSON
  externalUrl: String
  openOutsideApp: Boolean
  author: JSON
}

""""""
type version_GameAuthor {
  id: ID
  sort: Int
  user_created: JSON
  date_created: Date
  user_updated: JSON
  date_updated: Date
  name: String
  url: String
}

""""""
type version_Race {
  city: String
  country: String
  date: Date
  date_created: Date
  date_updated: Date
  deadline: Date
  departureLink: String
  eventLink: String
  geographicalScale: String
  id: ID
  inscriptionLink: String
  instructionLink: String
  liveResultLink: String
  mapName: String
  name: String
  originalDataFull: JSON
  originalDataId: String
  originalDataSource: String
  publicationLink: String
  rankingLink: String
  region: String
  sort: Int
  status: String
  user_created: JSON
  user_updated: JSON
  terrain: String
  distance: String
  categories: JSON
  instruction: JSON
}

""""""
type version_RaceCategory {
  amountOfControls: Int
  date_created: Date
  date_updated: Date
  distanceInMeter: Int
  equidistanceInMeter: Int
  id: ID
  name: String
  race: JSON
  sort: Int
  status: String
  user_created: JSON
  user_updated: JSON
}

""""""
type version_RaceInstruction {
  date_created: Date
  date_updated: Date
  id: ID
  linkCrawled: String
  linkOverwritten: String
  publicTransportAI: String
  race: JSON
  sort: Int
  user_created: JSON
  user_updated: JSON
  fileIdAI: String

  """A hash file of the file from the crawled or overwritten link."""
  fileHash: String
  summaryAI: String
}

""""""
type version_UserDeparture {
  date_created: Date
  date_updated: Date
  id: ID
  race: JSON
  raceCategory: JSON
  sort: Int
  startTimeInMinutes: Int
  status: String
  user: JSON
  user_created: JSON
  user_updated: JSON
}

input big_int_filter_operators {
  _eq: GraphQLBigInt
  _neq: GraphQLBigInt
  _in: [GraphQLBigInt]
  _nin: [GraphQLBigInt]
  _gt: GraphQLBigInt
  _gte: GraphQLBigInt
  _lt: GraphQLBigInt
  _lte: GraphQLBigInt
  _null: Boolean
  _nnull: Boolean
  _between: [GraphQLBigInt]
  _nbetween: [GraphQLBigInt]
}

input boolean_filter_operators {
  _eq: Boolean
  _neq: Boolean
  _null: Boolean
  _nnull: Boolean
}

input count_function_filter_operators {
  count: number_filter_operators
}

input create_directus_access_input {
  id: ID
  role: create_directus_roles_input
  user: create_directus_users_input
  policy: create_directus_policies_input
  sort: Int
}

input create_directus_files_input {
  id: ID
  storage: String!
  filename_disk: String
  filename_download: String!
  title: String
  type: String
  folder: create_directus_folders_input
  uploaded_by: create_directus_users_input
  created_on: Date
  modified_by: create_directus_users_input
  modified_on: Date
  charset: String
  filesize: GraphQLBigInt
  width: Int
  height: Int
  duration: Int
  embed: String
  description: String
  location: String
  tags: JSON
  metadata: JSON
  focal_point_x: Int
  focal_point_y: Int
  tus_id: String
  tus_data: JSON
  uploaded_on: Date
}

input create_directus_folders_input {
  id: ID
  name: String!
  parent: create_directus_folders_input
}

input create_directus_permissions_input {
  id: ID
  collection: String!
  action: String!
  permissions: JSON
  validation: JSON
  presets: JSON
  fields: [String]
  policy: create_directus_policies_input
}

input create_directus_policies_input {
  id: ID
  name: String!
  icon: String
  description: String
  ip_access: [String]

  """$t:field_options.directus_policies.enforce_tfa"""
  enforce_tfa: Boolean!
  admin_access: Boolean!
  app_access: Boolean!
  permissions: [create_directus_permissions_input]
  users: [create_directus_access_input]
  roles: [create_directus_access_input]
}

input create_directus_roles_input {
  id: ID
  name: String!
  icon: String
  description: String
  parent: create_directus_roles_input
  children: [create_directus_roles_input]
  policies: [create_directus_access_input]
  users: [create_directus_users_input]
}

input create_directus_sync_id_map_input {
  id: ID
  table: String!
  sync_id: String!
  local_id: String!
  created_at: Date
}

input create_directus_users_input {
  id: ID
  first_name: String
  last_name: String
  email: String
  password: Hash
  location: String
  title: String
  description: String
  tags: JSON
  avatar: create_directus_files_input
  language: String
  tfa_secret: Hash
  status: String
  role: create_directus_roles_input
  token: Hash
  last_access: Date
  last_page: String
  provider: String
  external_identifier: String
  auth_data: JSON
  email_notifications: Boolean
  appearance: String
  theme_dark: String
  theme_light: String
  theme_light_overrides: JSON
  theme_dark_overrides: JSON
  birthYear: Int
  composedIdentifierSolv: String
  races: [create_UserDeparture_input]
  policies: [create_directus_access_input]
}

input create_Game_input {
  id: ID
  status: String
  sort: Int
  user_created: create_directus_users_input
  date_created: Date
  user_updated: create_directus_users_input
  date_updated: Date
  subtitle: String
  title: String
  description: String
  image: create_directus_files_input
  externalUrl: String
  openOutsideApp: Boolean
  author: create_GameAuthor_input
}

input create_GameAuthor_input {
  id: ID
  sort: Int
  user_created: create_directus_users_input
  date_created: Date
  user_updated: create_directus_users_input
  date_updated: Date
  name: String!
  url: String!
}

input create_Race_input {
  city: String
  country: String
  date: Date
  date_created: Date
  date_updated: Date
  deadline: Date
  departureLink: String
  eventLink: String
  geographicalScale: String
  id: ID
  inscriptionLink: String
  instructionLink: String
  liveResultLink: String
  mapName: String
  name: String
  originalDataFull: JSON
  originalDataId: String
  originalDataSource: String
  publicationLink: String
  rankingLink: String
  region: String
  sort: Int
  status: String
  user_created: create_directus_users_input
  user_updated: create_directus_users_input
  terrain: String
  distance: String
  categories: [create_RaceCategory_input]
  instruction: [create_RaceInstruction_input]
}

input create_RaceCategory_input {
  amountOfControls: Int
  date_created: Date
  date_updated: Date
  distanceInMeter: Int
  equidistanceInMeter: Int
  id: ID
  name: String
  race: create_Race_input
  sort: Int
  status: String
  user_created: create_directus_users_input
  user_updated: create_directus_users_input
}

input create_RaceInstruction_input {
  date_created: Date
  date_updated: Date
  id: ID
  linkCrawled: String
  linkOverwritten: String
  publicTransportAI: String
  race: create_Race_input
  sort: Int
  user_created: create_directus_users_input
  user_updated: create_directus_users_input
  fileIdAI: String

  """A hash file of the file from the crawled or overwritten link."""
  fileHash: String
  summaryAI: String
}

input create_UserDeparture_input {
  date_created: Date
  date_updated: Date
  id: ID
  race: create_Race_input
  raceCategory: create_RaceCategory_input
  sort: Int
  startTimeInMinutes: Int
  status: String
  user: create_directus_users_input
  user_created: create_directus_users_input
  user_updated: create_directus_users_input
}

input date_filter_operators {
  _eq: String
  _neq: String
  _gt: String
  _gte: String
  _lt: String
  _lte: String
  _null: Boolean
  _nnull: Boolean
  _in: [String]
  _nin: [String]
  _between: [GraphQLStringOrFloat]
  _nbetween: [GraphQLStringOrFloat]
}

input date_function_filter_operators {
  year: number_filter_operators
  month: number_filter_operators
  week: number_filter_operators
  day: number_filter_operators
  weekday: number_filter_operators
}

input datetime_function_filter_operators {
  year: number_filter_operators
  month: number_filter_operators
  week: number_filter_operators
  day: number_filter_operators
  weekday: number_filter_operators
  hour: number_filter_operators
  minute: number_filter_operators
  second: number_filter_operators
}

input directus_access_filter {
  id: string_filter_operators
  role: directus_roles_filter
  user: directus_users_filter
  policy: directus_policies_filter
  sort: number_filter_operators
  _and: [directus_access_filter]
  _or: [directus_access_filter]
}

input directus_activity_filter {
  id: number_filter_operators
  action: string_filter_operators
  user: directus_users_filter
  timestamp: date_filter_operators
  timestamp_func: datetime_function_filter_operators
  ip: string_filter_operators
  user_agent: string_filter_operators
  collection: string_filter_operators
  item: string_filter_operators
  origin: string_filter_operators
  revisions: directus_revisions_filter
  revisions_func: count_function_filter_operators
  _and: [directus_activity_filter]
  _or: [directus_activity_filter]
}

input directus_dashboards_filter {
  id: string_filter_operators
  name: string_filter_operators
  icon: string_filter_operators
  note: string_filter_operators
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_created: directus_users_filter
  color: string_filter_operators
  panels: directus_panels_filter
  panels_func: count_function_filter_operators
  _and: [directus_dashboards_filter]
  _or: [directus_dashboards_filter]
}

input directus_files_filter {
  id: string_filter_operators
  storage: string_filter_operators
  filename_disk: string_filter_operators
  filename_download: string_filter_operators
  title: string_filter_operators
  type: string_filter_operators
  folder: directus_folders_filter
  uploaded_by: directus_users_filter
  created_on: date_filter_operators
  created_on_func: datetime_function_filter_operators
  modified_by: directus_users_filter
  modified_on: date_filter_operators
  modified_on_func: datetime_function_filter_operators
  charset: string_filter_operators
  filesize: big_int_filter_operators
  width: number_filter_operators
  height: number_filter_operators
  duration: number_filter_operators
  embed: string_filter_operators
  description: string_filter_operators
  location: string_filter_operators
  tags: string_filter_operators
  tags_func: count_function_filter_operators
  metadata: string_filter_operators
  metadata_func: count_function_filter_operators
  focal_point_x: number_filter_operators
  focal_point_y: number_filter_operators
  tus_id: string_filter_operators
  tus_data: string_filter_operators
  tus_data_func: count_function_filter_operators
  uploaded_on: date_filter_operators
  uploaded_on_func: datetime_function_filter_operators
  _and: [directus_files_filter]
  _or: [directus_files_filter]
}

input directus_flows_filter {
  id: string_filter_operators
  name: string_filter_operators
  icon: string_filter_operators
  color: string_filter_operators
  description: string_filter_operators
  status: string_filter_operators
  trigger: string_filter_operators
  accountability: string_filter_operators
  options: string_filter_operators
  options_func: count_function_filter_operators
  operation: directus_operations_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_created: directus_users_filter
  operations: directus_operations_filter
  operations_func: count_function_filter_operators
  _and: [directus_flows_filter]
  _or: [directus_flows_filter]
}

input directus_folders_filter {
  id: string_filter_operators
  name: string_filter_operators
  parent: directus_folders_filter
  _and: [directus_folders_filter]
  _or: [directus_folders_filter]
}

input directus_operations_filter {
  id: string_filter_operators
  name: string_filter_operators
  key: string_filter_operators
  type: string_filter_operators
  position_x: number_filter_operators
  position_y: number_filter_operators
  options: string_filter_operators
  options_func: count_function_filter_operators
  resolve: directus_operations_filter
  reject: directus_operations_filter
  flow: directus_flows_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_created: directus_users_filter
  _and: [directus_operations_filter]
  _or: [directus_operations_filter]
}

input directus_panels_filter {
  id: string_filter_operators
  dashboard: directus_dashboards_filter
  name: string_filter_operators
  icon: string_filter_operators
  color: string_filter_operators
  show_header: boolean_filter_operators
  note: string_filter_operators
  type: string_filter_operators
  position_x: number_filter_operators
  position_y: number_filter_operators
  width: number_filter_operators
  height: number_filter_operators
  options: string_filter_operators
  options_func: count_function_filter_operators
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_created: directus_users_filter
  _and: [directus_panels_filter]
  _or: [directus_panels_filter]
}

input directus_permissions_filter {
  id: number_filter_operators
  collection: string_filter_operators
  action: string_filter_operators
  permissions: string_filter_operators
  permissions_func: count_function_filter_operators
  validation: string_filter_operators
  validation_func: count_function_filter_operators
  presets: string_filter_operators
  presets_func: count_function_filter_operators
  fields: string_filter_operators
  policy: directus_policies_filter
  _and: [directus_permissions_filter]
  _or: [directus_permissions_filter]
}

input directus_policies_filter {
  id: string_filter_operators
  name: string_filter_operators
  icon: string_filter_operators
  description: string_filter_operators
  ip_access: string_filter_operators
  enforce_tfa: boolean_filter_operators
  admin_access: boolean_filter_operators
  app_access: boolean_filter_operators
  permissions: directus_permissions_filter
  permissions_func: count_function_filter_operators
  users: directus_access_filter
  users_func: count_function_filter_operators
  roles: directus_access_filter
  roles_func: count_function_filter_operators
  _and: [directus_policies_filter]
  _or: [directus_policies_filter]
}

input directus_revisions_filter {
  id: number_filter_operators
  activity: directus_activity_filter
  collection: string_filter_operators
  item: string_filter_operators
  data: string_filter_operators
  data_func: count_function_filter_operators
  delta: string_filter_operators
  delta_func: count_function_filter_operators
  parent: directus_revisions_filter
  version: directus_versions_filter
  _and: [directus_revisions_filter]
  _or: [directus_revisions_filter]
}

input directus_roles_filter {
  id: string_filter_operators
  name: string_filter_operators
  icon: string_filter_operators
  description: string_filter_operators
  parent: directus_roles_filter
  children: directus_roles_filter
  children_func: count_function_filter_operators
  policies: directus_access_filter
  policies_func: count_function_filter_operators
  users: directus_users_filter
  users_func: count_function_filter_operators
  _and: [directus_roles_filter]
  _or: [directus_roles_filter]
}

input directus_sync_id_map_filter {
  id: number_filter_operators
  table: string_filter_operators
  sync_id: string_filter_operators
  local_id: string_filter_operators
  created_at: date_filter_operators
  created_at_func: datetime_function_filter_operators
  _and: [directus_sync_id_map_filter]
  _or: [directus_sync_id_map_filter]
}

input directus_users_filter {
  id: string_filter_operators
  first_name: string_filter_operators
  last_name: string_filter_operators
  email: string_filter_operators
  password: hash_filter_operators
  location: string_filter_operators
  title: string_filter_operators
  description: string_filter_operators
  tags: string_filter_operators
  tags_func: count_function_filter_operators
  avatar: directus_files_filter
  language: string_filter_operators
  tfa_secret: hash_filter_operators
  status: string_filter_operators
  role: directus_roles_filter
  token: hash_filter_operators
  last_access: date_filter_operators
  last_access_func: datetime_function_filter_operators
  last_page: string_filter_operators
  provider: string_filter_operators
  external_identifier: string_filter_operators
  auth_data: string_filter_operators
  auth_data_func: count_function_filter_operators
  email_notifications: boolean_filter_operators
  appearance: string_filter_operators
  theme_dark: string_filter_operators
  theme_light: string_filter_operators
  theme_light_overrides: string_filter_operators
  theme_light_overrides_func: count_function_filter_operators
  theme_dark_overrides: string_filter_operators
  theme_dark_overrides_func: count_function_filter_operators
  birthYear: number_filter_operators
  composedIdentifierSolv: string_filter_operators
  races: UserDeparture_filter
  races_func: count_function_filter_operators
  policies: directus_access_filter
  policies_func: count_function_filter_operators
  _and: [directus_users_filter]
  _or: [directus_users_filter]
}

input directus_versions_filter {
  id: string_filter_operators
  key: string_filter_operators
  name: string_filter_operators
  collection: string_filter_operators
  item: string_filter_operators
  hash: string_filter_operators
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  user_created: directus_users_filter
  user_updated: directus_users_filter
  delta: string_filter_operators
  delta_func: count_function_filter_operators
  _and: [directus_versions_filter]
  _or: [directus_versions_filter]
}

input Game_filter {
  id: string_filter_operators
  status: string_filter_operators
  sort: number_filter_operators
  user_created: directus_users_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: directus_users_filter
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  subtitle: string_filter_operators
  title: string_filter_operators
  description: string_filter_operators
  image: directus_files_filter
  externalUrl: string_filter_operators
  openOutsideApp: boolean_filter_operators
  author: GameAuthor_filter
  _and: [Game_filter]
  _or: [Game_filter]
}

input GameAuthor_filter {
  id: string_filter_operators
  sort: number_filter_operators
  user_created: directus_users_filter
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  user_updated: directus_users_filter
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  name: string_filter_operators
  url: string_filter_operators
  _and: [GameAuthor_filter]
  _or: [GameAuthor_filter]
}

input hash_filter_operators {
  _null: Boolean
  _nnull: Boolean
  _empty: Boolean
  _nempty: Boolean
}

input number_filter_operators {
  _eq: GraphQLStringOrFloat
  _neq: GraphQLStringOrFloat
  _in: [GraphQLStringOrFloat]
  _nin: [GraphQLStringOrFloat]
  _gt: GraphQLStringOrFloat
  _gte: GraphQLStringOrFloat
  _lt: GraphQLStringOrFloat
  _lte: GraphQLStringOrFloat
  _null: Boolean
  _nnull: Boolean
  _between: [GraphQLStringOrFloat]
  _nbetween: [GraphQLStringOrFloat]
}

input Race_filter {
  city: string_filter_operators
  country: string_filter_operators
  date: date_filter_operators
  date_func: date_function_filter_operators
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  deadline: date_filter_operators
  deadline_func: datetime_function_filter_operators
  departureLink: string_filter_operators
  eventLink: string_filter_operators
  geographicalScale: string_filter_operators
  id: string_filter_operators
  inscriptionLink: string_filter_operators
  instructionLink: string_filter_operators
  liveResultLink: string_filter_operators
  mapName: string_filter_operators
  name: string_filter_operators
  originalDataFull: string_filter_operators
  originalDataFull_func: count_function_filter_operators
  originalDataId: string_filter_operators
  originalDataSource: string_filter_operators
  publicationLink: string_filter_operators
  rankingLink: string_filter_operators
  region: string_filter_operators
  sort: number_filter_operators
  status: string_filter_operators
  user_created: directus_users_filter
  user_updated: directus_users_filter
  terrain: string_filter_operators
  distance: string_filter_operators
  categories: RaceCategory_filter
  categories_func: count_function_filter_operators
  instruction: RaceInstruction_filter
  instruction_func: count_function_filter_operators
  _and: [Race_filter]
  _or: [Race_filter]
}

input RaceCategory_filter {
  amountOfControls: number_filter_operators
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  distanceInMeter: number_filter_operators
  equidistanceInMeter: number_filter_operators
  id: string_filter_operators
  name: string_filter_operators
  race: Race_filter
  sort: number_filter_operators
  status: string_filter_operators
  user_created: directus_users_filter
  user_updated: directus_users_filter
  _and: [RaceCategory_filter]
  _or: [RaceCategory_filter]
}

input RaceInstruction_filter {
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  id: string_filter_operators
  linkCrawled: string_filter_operators
  linkOverwritten: string_filter_operators
  publicTransportAI: string_filter_operators
  race: Race_filter
  sort: number_filter_operators
  user_created: directus_users_filter
  user_updated: directus_users_filter
  fileIdAI: string_filter_operators
  fileHash: string_filter_operators
  summaryAI: string_filter_operators
  _and: [RaceInstruction_filter]
  _or: [RaceInstruction_filter]
}

input string_filter_operators {
  _eq: String
  _neq: String
  _contains: String
  _icontains: String
  _ncontains: String
  _starts_with: String
  _nstarts_with: String
  _istarts_with: String
  _nistarts_with: String
  _ends_with: String
  _nends_with: String
  _iends_with: String
  _niends_with: String
  _in: [String]
  _nin: [String]
  _null: Boolean
  _nnull: Boolean
  _empty: Boolean
  _nempty: Boolean
}

input update_directus_access_input {
  id: ID
  role: update_directus_roles_input
  user: update_directus_users_input
  policy: update_directus_policies_input
  sort: Int
}

input update_directus_files_input {
  id: ID
  storage: String
  filename_disk: String
  filename_download: String
  title: String
  type: String
  folder: update_directus_folders_input
  uploaded_by: update_directus_users_input
  created_on: Date
  modified_by: update_directus_users_input
  modified_on: Date
  charset: String
  filesize: GraphQLBigInt
  width: Int
  height: Int
  duration: Int
  embed: String
  description: String
  location: String
  tags: JSON
  metadata: JSON
  focal_point_x: Int
  focal_point_y: Int
  tus_id: String
  tus_data: JSON
  uploaded_on: Date
}

input update_directus_folders_input {
  id: ID
  name: String
  parent: update_directus_folders_input
}

input update_directus_permissions_input {
  id: ID
  collection: String
  action: String
  permissions: JSON
  validation: JSON
  presets: JSON
  fields: [String]
  policy: update_directus_policies_input
}

input update_directus_policies_input {
  id: ID
  name: String
  icon: String
  description: String
  ip_access: [String]

  """$t:field_options.directus_policies.enforce_tfa"""
  enforce_tfa: Boolean
  admin_access: Boolean
  app_access: Boolean
  permissions: [update_directus_permissions_input]
  users: [update_directus_access_input]
  roles: [update_directus_access_input]
}

input update_directus_roles_input {
  id: ID
  name: String
  icon: String
  description: String
  parent: update_directus_roles_input
  children: [update_directus_roles_input]
  policies: [update_directus_access_input]
  users: [update_directus_users_input]
}

input update_directus_sync_id_map_input {
  id: ID
  table: String
  sync_id: String
  local_id: String
  created_at: Date
}

input update_directus_users_input {
  id: ID
  first_name: String
  last_name: String
  email: String
  password: Hash
  location: String
  title: String
  description: String
  tags: JSON
  avatar: update_directus_files_input
  language: String
  tfa_secret: Hash
  status: String
  role: update_directus_roles_input
  token: Hash
  last_access: Date
  last_page: String
  provider: String
  external_identifier: String
  auth_data: JSON
  email_notifications: Boolean
  appearance: String
  theme_dark: String
  theme_light: String
  theme_light_overrides: JSON
  theme_dark_overrides: JSON
  birthYear: Int
  composedIdentifierSolv: String
  races: [update_UserDeparture_input]
  policies: [update_directus_access_input]
}

input update_Game_input {
  id: ID
  status: String
  sort: Int
  user_created: update_directus_users_input
  date_created: Date
  user_updated: update_directus_users_input
  date_updated: Date
  subtitle: String
  title: String
  description: String
  image: update_directus_files_input
  externalUrl: String
  openOutsideApp: Boolean
  author: update_GameAuthor_input
}

input update_GameAuthor_input {
  id: ID
  sort: Int
  user_created: update_directus_users_input
  date_created: Date
  user_updated: update_directus_users_input
  date_updated: Date
  name: String
  url: String
}

input update_Race_input {
  city: String
  country: String
  date: Date
  date_created: Date
  date_updated: Date
  deadline: Date
  departureLink: String
  eventLink: String
  geographicalScale: String
  id: ID
  inscriptionLink: String
  instructionLink: String
  liveResultLink: String
  mapName: String
  name: String
  originalDataFull: JSON
  originalDataId: String
  originalDataSource: String
  publicationLink: String
  rankingLink: String
  region: String
  sort: Int
  status: String
  user_created: update_directus_users_input
  user_updated: update_directus_users_input
  terrain: String
  distance: String
  categories: [update_RaceCategory_input]
  instruction: [update_RaceInstruction_input]
}

input update_RaceCategory_input {
  amountOfControls: Int
  date_created: Date
  date_updated: Date
  distanceInMeter: Int
  equidistanceInMeter: Int
  id: ID
  name: String
  race: update_Race_input
  sort: Int
  status: String
  user_created: update_directus_users_input
  user_updated: update_directus_users_input
}

input update_RaceInstruction_input {
  date_created: Date
  date_updated: Date
  id: ID
  linkCrawled: String
  linkOverwritten: String
  publicTransportAI: String
  race: update_Race_input
  sort: Int
  user_created: update_directus_users_input
  user_updated: update_directus_users_input
  fileIdAI: String

  """A hash file of the file from the crawled or overwritten link."""
  fileHash: String
  summaryAI: String
}

input update_UserDeparture_input {
  date_created: Date
  date_updated: Date
  id: ID
  race: update_Race_input
  raceCategory: update_RaceCategory_input
  sort: Int
  startTimeInMinutes: Int
  status: String
  user: update_directus_users_input
  user_created: update_directus_users_input
  user_updated: update_directus_users_input
}

input UserDeparture_filter {
  date_created: date_filter_operators
  date_created_func: datetime_function_filter_operators
  date_updated: date_filter_operators
  date_updated_func: datetime_function_filter_operators
  id: string_filter_operators
  race: Race_filter
  raceCategory: RaceCategory_filter
  sort: number_filter_operators
  startTimeInMinutes: number_filter_operators
  status: string_filter_operators
  user: directus_users_filter
  user_created: directus_users_filter
  user_updated: directus_users_filter
  _and: [UserDeparture_filter]
  _or: [UserDeparture_filter]
}